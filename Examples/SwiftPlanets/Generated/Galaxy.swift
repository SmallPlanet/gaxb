
//
// Autogenerated by gaxb at 08:27:41 AM on 07/08/14
//

class Galaxy {

		class func classWithName(name : String) -> GaxbElement? {
				switch name {
				case "Planet":
						return Planet()
				case "AstronomicalObject":
						return AstronomicalObject()
				case "Moon":
						return Moon()
				case "StarSystem":
						return StarSystem()
				case "Star":
						return Star()
				default:
						return nil
				}
		}

		class func readFromFile(filepath : String) -> GaxbElement? {
				let rootXML: AnyObject! = RXMLElement.elementFromXMLFile(filepath)
				if rootXML as? RXMLElement {
						return Galaxy.parseElement(rootXML as RXMLElement)
				}
				return nil
		}

		class func parseElement(element: RXMLElement) -> GaxbElement? {
				println("element = " + element.tag)
				if let entity : GaxbElement = Galaxy.classWithName(element.tag) {
						let names = element.attributeNames() as [String]
						for name in names {
								let value = element.attribute(name) as String
								entity.setAttribute(value, key: name)
						}

						let block: (element: RXMLElement!) -> Void = { element in
								if let subEntity : GaxbElement? = Galaxy.parseElement(element) {
										entity.setElement(subEntity!, key: element.tag!)
										println("element.tag = " + element.tag )
								}
						}
						element.iterate("*", usingBlock:block)
						return entity
				}
				return nil
		}

}

enum PlanetType: String {
	case IronCore = "IronCore"
	case IceGiant = "IceGiant"
	case GasGiant = "GasGiant"
}





//+ (id) readFromData:(NSData *)data withParent:(id)p AndMemoryLite:(BOOL)memLite
//+ (id) readFromData:(NSData *)data withParent:(id)p
//+ (id) readFromData:(NSData *)data
//+ (id) readFromFile:(NSString *)path
//+ (id) readFromString:(NSString *)xml_string
//+ (id) readFromDataFast:(NSData *)data
//+ (id) readFromFileFast:(NSString *)path
//+ (id) readFromStringFast:(NSString *)xml_string
//+ (NSString *) writeToString:(id)object
//+ (NSString *) writeOriginalXMLToString:(id)object
//+ (void) write:(id)object toFile:(NSString *)path
//+ (NSData *) writeToData:(id)object
//- (id) initWithParent:(id)p AndMemoryLite:(BOOL)m
//static char * DecodeAllAmpersands(char * src)
//static void SetValue(NSObject * object, NSObject * childObject, const char * elementName, const char * className)
//static NSObject * CreateElementWithNamespace(TBXMLElement * element, const char * currentNamespace, NSMutableDictionary * namespaceMap, NSObject * parent)
