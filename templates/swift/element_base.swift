<%
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"..string.upper(this.name).."BASE".."_";
CAP_NAME = capitalizedString(this.name);
FULL_NAME_CAMEL = capitalizedString(this.namespace).."_"..capitalizedString(this.name).."Base";
%>//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//


class <%= CAP_NAME %> {
<% if (hasSuperclass(this) == false) then %>
    var xmlns: String = "<%= this.namespaceURL %>"
    var parent: <%= CAP_NAME %>?
    var originalValues = Dictionary<String, String> ()

    func gaxbValueWillChange(name:String) { }
    func gaxbValueDidChange(name:String) { }

<% end

for k,v in pairs(this.sequences) do
	if(isPlural(v)) then %>
    var <%= pluralName(v.name) %>: Array<<% capitalizedString(v.name)%>>
<%
  else %>
    var <%= v.name %>: <%= capitalizedString(v.name) %>?
<%
	end
end

for k,v in pairs(this.attributes) do %>
	var <%= v.name %>: <%= typeForItem(v) %><%
	if (v.default == nil) then %>?<%
	end %>
    var <%= v.name %>Exists: Bool {
        return <%= v.name %> != nil
    }
    func <%= v.name %>AsString() -> String {<%
 if (v.type=="string") then %>
        return <%= v.name %><% if (v.default == nil) then %>!<% end %>
<% else %>
        return <%= v.name %>.description // <%= typeNameForItem(v) %> / <%= v.type %>
<% end
%>    }
<%
	end
	if (this.mixedContent) then %>
@synthesize MixedContent;
@synthesize MixedContentExists;
-(void) setMixedContent:(NSString *)v
{
    MixedContentExists=YES;
    if([v isKindOfClass:[NSString class]] == NO)
    {
        v = [v description];
    }
    [self gaxb_valueWillChange:@"MixedContent"];
    [self willChangeValueForKey:@"MixedContentAsString"];
    MixedContent = v;
    [self didChangeValueForKey:@"MixedContentAsString"];
    [self gaxb_valueDidChange:@"MixedContent"];
};
- (NSString *) MixedContentAsString { return [MixedContent description]; }
- (void) setMixedContentWithString:(NSString *)string
{
	MixedContentExists=YES;
	[self setMixedContent:[[NSClassFromString(@"NSString") alloc] initWithString:string]];
}
<%
	end
	for k,v in pairs(this.sequences) do
		if (v.name == "any") then
%>@synthesize anys;
- (void) appendAnyWithString:(NSString *)string
{
	// does this make sense?
	[anys addObject:[[NSClassFromString(@"any") alloc] initWithString:string]];
}
<%		elseif(isPlural(v)) then %>
@synthesize <%= pluralName(v.name) %>;<%
		else %>
@synthesize <%= v.name %>;
@synthesize <%= v.name %>Exists;<%
			if (isObject(v)) then %>
- (void) set<%= capitalizedString(v.name) %>:(<% typeForItem(v) %>)v
{
	<%= v.name %>Exists=YES;
	[self gaxb_valueWillChange:@"<%= v.name %>"];
	[self willChangeValueForKey:@"<%= v.name %>AsString"];
	<%= v.name %> = v;
	[self didChangeValueForKey:@"<%= v.name %>AsString"];
	[self gaxb_valueDidChange:@"<%= v.name %>"];
};
<%			end
		end
	end
%>

    func attributesXML(useOriginalValues:Bool? = false) -> String {
        var xml = ""
        if parent {
            xml += parent!.attributesXML(useOriginalValues:useOriginalValues)
        }
        if useOriginalValues! {
            for (key, value) in originalValues {
                xml += " \\(key)='\\(value)'"
            }
        } else {
<% for k,v in pairs(this.attributes) do
%>            if <%= v.name %>Exists {
                xml += " <%= v.name %>='\\(<%= v.name %>AsString())'"
            }
<% end
%>        }
        return xml
    }

    func sequencesXML(useOriginalValues:Bool? = false) -> String {
        var xml = ""
        if parent {
            xml += parent!.sequencesXML(useOriginalValues: useOriginalValues)
        }
<%    for k,v in pairs(this.sequences) do
      if (isPlural(v)) then %>
        for <%= v.name %> in <%= pluralName(v.name) %> {
            xml += <%= v.name %>.toXML()
        }
<% else %>    xml += <%= v.name %>.toXML()<% end
    end
%>        return xml
    }

    func toXML(useOriginalValues:Bool? = false) -> String {

        var xml = "<<%= CAP_NAME %>"
        if parent {
            if parent!.xmlns != xmlns {
                xml += " xmlns='\\(xmlns)'"
            }
        }

        xml += attributesXML(useOriginalValues: useOriginalValues)

        var sXML = sequencesXML(useOriginalValues: useOriginalValues)
        xml += sXML == "" ? "/>" : ">\\n\\(sXML)</AstronomicalObject>"

        return xml
    }

    func description() -> String {
        return toXML(useOriginalValues: false)
    }

}
